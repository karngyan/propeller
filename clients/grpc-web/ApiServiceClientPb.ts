/**
 * @fileoverview gRPC-Web generated client stub for push.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.2
// source: api.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as api_pb from './api_pb'; // proto import: "api.proto"


export class PushServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorSendEventToClientChannel = new grpcWeb.MethodDescriptor(
    '/push.v1.PushService/SendEventToClientChannel',
    grpcWeb.MethodType.UNARY,
    api_pb.SendEventToClientChannelRequest,
    api_pb.SendEventToClientChannelResponse,
    (request: api_pb.SendEventToClientChannelRequest) => {
      return request.serializeBinary();
    },
    api_pb.SendEventToClientChannelResponse.deserializeBinary
  );

  sendEventToClientChannel(
    request: api_pb.SendEventToClientChannelRequest,
    metadata?: grpcWeb.Metadata | null): Promise<api_pb.SendEventToClientChannelResponse>;

  sendEventToClientChannel(
    request: api_pb.SendEventToClientChannelRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_pb.SendEventToClientChannelResponse) => void): grpcWeb.ClientReadableStream<api_pb.SendEventToClientChannelResponse>;

  sendEventToClientChannel(
    request: api_pb.SendEventToClientChannelRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_pb.SendEventToClientChannelResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/push.v1.PushService/SendEventToClientChannel',
        request,
        metadata || {},
        this.methodDescriptorSendEventToClientChannel,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/push.v1.PushService/SendEventToClientChannel',
    request,
    metadata || {},
    this.methodDescriptorSendEventToClientChannel);
  }

  methodDescriptorSendEventToClientDeviceChannel = new grpcWeb.MethodDescriptor(
    '/push.v1.PushService/SendEventToClientDeviceChannel',
    grpcWeb.MethodType.UNARY,
    api_pb.SendEventToClientDeviceChannelRequest,
    api_pb.SendEventToClientDeviceChannelResponse,
    (request: api_pb.SendEventToClientDeviceChannelRequest) => {
      return request.serializeBinary();
    },
    api_pb.SendEventToClientDeviceChannelResponse.deserializeBinary
  );

  sendEventToClientDeviceChannel(
    request: api_pb.SendEventToClientDeviceChannelRequest,
    metadata?: grpcWeb.Metadata | null): Promise<api_pb.SendEventToClientDeviceChannelResponse>;

  sendEventToClientDeviceChannel(
    request: api_pb.SendEventToClientDeviceChannelRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_pb.SendEventToClientDeviceChannelResponse) => void): grpcWeb.ClientReadableStream<api_pb.SendEventToClientDeviceChannelResponse>;

  sendEventToClientDeviceChannel(
    request: api_pb.SendEventToClientDeviceChannelRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_pb.SendEventToClientDeviceChannelResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/push.v1.PushService/SendEventToClientDeviceChannel',
        request,
        metadata || {},
        this.methodDescriptorSendEventToClientDeviceChannel,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/push.v1.PushService/SendEventToClientDeviceChannel',
    request,
    metadata || {},
    this.methodDescriptorSendEventToClientDeviceChannel);
  }

  methodDescriptorSendEventToTopic = new grpcWeb.MethodDescriptor(
    '/push.v1.PushService/SendEventToTopic',
    grpcWeb.MethodType.UNARY,
    api_pb.SendEventToTopicRequest,
    api_pb.SendEventToTopicResponse,
    (request: api_pb.SendEventToTopicRequest) => {
      return request.serializeBinary();
    },
    api_pb.SendEventToTopicResponse.deserializeBinary
  );

  sendEventToTopic(
    request: api_pb.SendEventToTopicRequest,
    metadata?: grpcWeb.Metadata | null): Promise<api_pb.SendEventToTopicResponse>;

  sendEventToTopic(
    request: api_pb.SendEventToTopicRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_pb.SendEventToTopicResponse) => void): grpcWeb.ClientReadableStream<api_pb.SendEventToTopicResponse>;

  sendEventToTopic(
    request: api_pb.SendEventToTopicRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_pb.SendEventToTopicResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/push.v1.PushService/SendEventToTopic',
        request,
        metadata || {},
        this.methodDescriptorSendEventToTopic,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/push.v1.PushService/SendEventToTopic',
    request,
    metadata || {},
    this.methodDescriptorSendEventToTopic);
  }

  methodDescriptorSendEventToTopics = new grpcWeb.MethodDescriptor(
    '/push.v1.PushService/SendEventToTopics',
    grpcWeb.MethodType.UNARY,
    api_pb.SendEventToTopicsRequest,
    api_pb.SendEventToTopicsResponse,
    (request: api_pb.SendEventToTopicsRequest) => {
      return request.serializeBinary();
    },
    api_pb.SendEventToTopicsResponse.deserializeBinary
  );

  sendEventToTopics(
    request: api_pb.SendEventToTopicsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<api_pb.SendEventToTopicsResponse>;

  sendEventToTopics(
    request: api_pb.SendEventToTopicsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_pb.SendEventToTopicsResponse) => void): grpcWeb.ClientReadableStream<api_pb.SendEventToTopicsResponse>;

  sendEventToTopics(
    request: api_pb.SendEventToTopicsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_pb.SendEventToTopicsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/push.v1.PushService/SendEventToTopics',
        request,
        metadata || {},
        this.methodDescriptorSendEventToTopics,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/push.v1.PushService/SendEventToTopics',
    request,
    metadata || {},
    this.methodDescriptorSendEventToTopics);
  }

  methodDescriptorGetClientActiveDevices = new grpcWeb.MethodDescriptor(
    '/push.v1.PushService/GetClientActiveDevices',
    grpcWeb.MethodType.UNARY,
    api_pb.GetClientActiveDevicesRequest,
    api_pb.GetClientActiveDevicesResponse,
    (request: api_pb.GetClientActiveDevicesRequest) => {
      return request.serializeBinary();
    },
    api_pb.GetClientActiveDevicesResponse.deserializeBinary
  );

  getClientActiveDevices(
    request: api_pb.GetClientActiveDevicesRequest,
    metadata?: grpcWeb.Metadata | null): Promise<api_pb.GetClientActiveDevicesResponse>;

  getClientActiveDevices(
    request: api_pb.GetClientActiveDevicesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_pb.GetClientActiveDevicesResponse) => void): grpcWeb.ClientReadableStream<api_pb.GetClientActiveDevicesResponse>;

  getClientActiveDevices(
    request: api_pb.GetClientActiveDevicesRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_pb.GetClientActiveDevicesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/push.v1.PushService/GetClientActiveDevices',
        request,
        metadata || {},
        this.methodDescriptorGetClientActiveDevices,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/push.v1.PushService/GetClientActiveDevices',
    request,
    metadata || {},
    this.methodDescriptorGetClientActiveDevices);
  }

}

