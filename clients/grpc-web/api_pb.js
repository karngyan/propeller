// source: api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.push.v1.ChannelEvent', null, global);
goog.exportSymbol('proto.push.v1.ChannelEventAck', null, global);
goog.exportSymbol('proto.push.v1.ChannelRequest', null, global);
goog.exportSymbol('proto.push.v1.ChannelRequest.RequestCase', null, global);
goog.exportSymbol('proto.push.v1.ChannelResponse', null, global);
goog.exportSymbol('proto.push.v1.ChannelResponse.ResponseCase', null, global);
goog.exportSymbol('proto.push.v1.ConnectAck', null, global);
goog.exportSymbol('proto.push.v1.Device', null, global);
goog.exportSymbol('proto.push.v1.Event', null, global);
goog.exportSymbol('proto.push.v1.Event.Type', null, global);
goog.exportSymbol('proto.push.v1.GetClientActiveDevicesRequest', null, global);
goog.exportSymbol('proto.push.v1.GetClientActiveDevicesResponse', null, global);
goog.exportSymbol('proto.push.v1.ResponseStatus', null, global);
goog.exportSymbol('proto.push.v1.SendEventToClientChannelRequest', null, global);
goog.exportSymbol('proto.push.v1.SendEventToClientChannelResponse', null, global);
goog.exportSymbol('proto.push.v1.SendEventToClientDeviceChannelRequest', null, global);
goog.exportSymbol('proto.push.v1.SendEventToClientDeviceChannelResponse', null, global);
goog.exportSymbol('proto.push.v1.SendEventToTopicRequest', null, global);
goog.exportSymbol('proto.push.v1.SendEventToTopicResponse', null, global);
goog.exportSymbol('proto.push.v1.SendEventToTopicsRequest', null, global);
goog.exportSymbol('proto.push.v1.SendEventToTopicsResponse', null, global);
goog.exportSymbol('proto.push.v1.TopicSubscriptionRequest', null, global);
goog.exportSymbol('proto.push.v1.TopicSubscriptionRequestAck', null, global);
goog.exportSymbol('proto.push.v1.TopicUnsubscriptionRequest', null, global);
goog.exportSymbol('proto.push.v1.TopicUnsubscriptionRequestAck', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.ChannelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.push.v1.ChannelRequest.oneofGroups_);
};
goog.inherits(proto.push.v1.ChannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.ChannelRequest.displayName = 'proto.push.v1.ChannelRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.ChannelResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.push.v1.ChannelResponse.oneofGroups_);
};
goog.inherits(proto.push.v1.ChannelResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.ChannelResponse.displayName = 'proto.push.v1.ChannelResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.ChannelEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.ChannelEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.ChannelEvent.displayName = 'proto.push.v1.ChannelEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.ConnectAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.ConnectAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.ConnectAck.displayName = 'proto.push.v1.ConnectAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.ChannelEventAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.ChannelEventAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.ChannelEventAck.displayName = 'proto.push.v1.ChannelEventAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.TopicSubscriptionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.TopicSubscriptionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.TopicSubscriptionRequest.displayName = 'proto.push.v1.TopicSubscriptionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.TopicSubscriptionRequestAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.TopicSubscriptionRequestAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.TopicSubscriptionRequestAck.displayName = 'proto.push.v1.TopicSubscriptionRequestAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.TopicUnsubscriptionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.TopicUnsubscriptionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.TopicUnsubscriptionRequest.displayName = 'proto.push.v1.TopicUnsubscriptionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.TopicUnsubscriptionRequestAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.TopicUnsubscriptionRequestAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.TopicUnsubscriptionRequestAck.displayName = 'proto.push.v1.TopicUnsubscriptionRequestAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.GetClientActiveDevicesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.GetClientActiveDevicesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.GetClientActiveDevicesRequest.displayName = 'proto.push.v1.GetClientActiveDevicesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.GetClientActiveDevicesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.push.v1.GetClientActiveDevicesResponse.repeatedFields_, null);
};
goog.inherits(proto.push.v1.GetClientActiveDevicesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.GetClientActiveDevicesResponse.displayName = 'proto.push.v1.GetClientActiveDevicesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.SendEventToClientChannelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.SendEventToClientChannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.SendEventToClientChannelRequest.displayName = 'proto.push.v1.SendEventToClientChannelRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.SendEventToClientChannelResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.SendEventToClientChannelResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.SendEventToClientChannelResponse.displayName = 'proto.push.v1.SendEventToClientChannelResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.SendEventToClientDeviceChannelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.SendEventToClientDeviceChannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.SendEventToClientDeviceChannelRequest.displayName = 'proto.push.v1.SendEventToClientDeviceChannelRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.SendEventToClientDeviceChannelResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.SendEventToClientDeviceChannelResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.SendEventToClientDeviceChannelResponse.displayName = 'proto.push.v1.SendEventToClientDeviceChannelResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.SendEventToTopicRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.SendEventToTopicRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.SendEventToTopicRequest.displayName = 'proto.push.v1.SendEventToTopicRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.SendEventToTopicResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.SendEventToTopicResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.SendEventToTopicResponse.displayName = 'proto.push.v1.SendEventToTopicResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.SendEventToTopicsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.push.v1.SendEventToTopicsRequest.repeatedFields_, null);
};
goog.inherits(proto.push.v1.SendEventToTopicsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.SendEventToTopicsRequest.displayName = 'proto.push.v1.SendEventToTopicsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.SendEventToTopicsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.SendEventToTopicsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.SendEventToTopicsResponse.displayName = 'proto.push.v1.SendEventToTopicsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.Event.displayName = 'proto.push.v1.Event';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.ResponseStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.ResponseStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.ResponseStatus.displayName = 'proto.push.v1.ResponseStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.Device = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.Device, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.Device.displayName = 'proto.push.v1.Device';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.push.v1.ChannelRequest.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.push.v1.ChannelRequest.RequestCase = {
  REQUEST_NOT_SET: 0,
  CHANNEL_EVENT: 1,
  CHANNEL_EVENT_ACK: 2,
  TOPIC_SUBSCRIPTION_REQUEST: 3,
  TOPIC_UNSUBSCRIPTION_REQUEST: 4
};

/**
 * @return {proto.push.v1.ChannelRequest.RequestCase}
 */
proto.push.v1.ChannelRequest.prototype.getRequestCase = function() {
  return /** @type {proto.push.v1.ChannelRequest.RequestCase} */(jspb.Message.computeOneofCase(this, proto.push.v1.ChannelRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.ChannelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.ChannelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.ChannelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.ChannelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
channelEvent: (f = msg.getChannelEvent()) && proto.push.v1.ChannelEvent.toObject(includeInstance, f),
channelEventAck: (f = msg.getChannelEventAck()) && proto.push.v1.ChannelEventAck.toObject(includeInstance, f),
topicSubscriptionRequest: (f = msg.getTopicSubscriptionRequest()) && proto.push.v1.TopicSubscriptionRequest.toObject(includeInstance, f),
topicUnsubscriptionRequest: (f = msg.getTopicUnsubscriptionRequest()) && proto.push.v1.TopicUnsubscriptionRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.ChannelRequest}
 */
proto.push.v1.ChannelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.ChannelRequest;
  return proto.push.v1.ChannelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.ChannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.ChannelRequest}
 */
proto.push.v1.ChannelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.push.v1.ChannelEvent;
      reader.readMessage(value,proto.push.v1.ChannelEvent.deserializeBinaryFromReader);
      msg.setChannelEvent(value);
      break;
    case 2:
      var value = new proto.push.v1.ChannelEventAck;
      reader.readMessage(value,proto.push.v1.ChannelEventAck.deserializeBinaryFromReader);
      msg.setChannelEventAck(value);
      break;
    case 3:
      var value = new proto.push.v1.TopicSubscriptionRequest;
      reader.readMessage(value,proto.push.v1.TopicSubscriptionRequest.deserializeBinaryFromReader);
      msg.setTopicSubscriptionRequest(value);
      break;
    case 4:
      var value = new proto.push.v1.TopicUnsubscriptionRequest;
      reader.readMessage(value,proto.push.v1.TopicUnsubscriptionRequest.deserializeBinaryFromReader);
      msg.setTopicUnsubscriptionRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.ChannelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.ChannelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.ChannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.ChannelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.push.v1.ChannelEvent.serializeBinaryToWriter
    );
  }
  f = message.getChannelEventAck();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.push.v1.ChannelEventAck.serializeBinaryToWriter
    );
  }
  f = message.getTopicSubscriptionRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.push.v1.TopicSubscriptionRequest.serializeBinaryToWriter
    );
  }
  f = message.getTopicUnsubscriptionRequest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.push.v1.TopicUnsubscriptionRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChannelEvent channel_event = 1;
 * @return {?proto.push.v1.ChannelEvent}
 */
proto.push.v1.ChannelRequest.prototype.getChannelEvent = function() {
  return /** @type{?proto.push.v1.ChannelEvent} */ (
    jspb.Message.getWrapperField(this, proto.push.v1.ChannelEvent, 1));
};


/**
 * @param {?proto.push.v1.ChannelEvent|undefined} value
 * @return {!proto.push.v1.ChannelRequest} returns this
*/
proto.push.v1.ChannelRequest.prototype.setChannelEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.push.v1.ChannelRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.ChannelRequest} returns this
 */
proto.push.v1.ChannelRequest.prototype.clearChannelEvent = function() {
  return this.setChannelEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.ChannelRequest.prototype.hasChannelEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChannelEventAck channel_event_ack = 2;
 * @return {?proto.push.v1.ChannelEventAck}
 */
proto.push.v1.ChannelRequest.prototype.getChannelEventAck = function() {
  return /** @type{?proto.push.v1.ChannelEventAck} */ (
    jspb.Message.getWrapperField(this, proto.push.v1.ChannelEventAck, 2));
};


/**
 * @param {?proto.push.v1.ChannelEventAck|undefined} value
 * @return {!proto.push.v1.ChannelRequest} returns this
*/
proto.push.v1.ChannelRequest.prototype.setChannelEventAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.push.v1.ChannelRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.ChannelRequest} returns this
 */
proto.push.v1.ChannelRequest.prototype.clearChannelEventAck = function() {
  return this.setChannelEventAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.ChannelRequest.prototype.hasChannelEventAck = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TopicSubscriptionRequest topic_subscription_request = 3;
 * @return {?proto.push.v1.TopicSubscriptionRequest}
 */
proto.push.v1.ChannelRequest.prototype.getTopicSubscriptionRequest = function() {
  return /** @type{?proto.push.v1.TopicSubscriptionRequest} */ (
    jspb.Message.getWrapperField(this, proto.push.v1.TopicSubscriptionRequest, 3));
};


/**
 * @param {?proto.push.v1.TopicSubscriptionRequest|undefined} value
 * @return {!proto.push.v1.ChannelRequest} returns this
*/
proto.push.v1.ChannelRequest.prototype.setTopicSubscriptionRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.push.v1.ChannelRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.ChannelRequest} returns this
 */
proto.push.v1.ChannelRequest.prototype.clearTopicSubscriptionRequest = function() {
  return this.setTopicSubscriptionRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.ChannelRequest.prototype.hasTopicSubscriptionRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TopicUnsubscriptionRequest topic_unsubscription_request = 4;
 * @return {?proto.push.v1.TopicUnsubscriptionRequest}
 */
proto.push.v1.ChannelRequest.prototype.getTopicUnsubscriptionRequest = function() {
  return /** @type{?proto.push.v1.TopicUnsubscriptionRequest} */ (
    jspb.Message.getWrapperField(this, proto.push.v1.TopicUnsubscriptionRequest, 4));
};


/**
 * @param {?proto.push.v1.TopicUnsubscriptionRequest|undefined} value
 * @return {!proto.push.v1.ChannelRequest} returns this
*/
proto.push.v1.ChannelRequest.prototype.setTopicUnsubscriptionRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.push.v1.ChannelRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.ChannelRequest} returns this
 */
proto.push.v1.ChannelRequest.prototype.clearTopicUnsubscriptionRequest = function() {
  return this.setTopicUnsubscriptionRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.ChannelRequest.prototype.hasTopicUnsubscriptionRequest = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.push.v1.ChannelResponse.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.push.v1.ChannelResponse.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  CONNECT_ACK: 1,
  CHANNEL_EVENT: 2,
  CHANNEL_EVENT_ACK: 3,
  TOPIC_SUBSCRIPTION_REQUEST_ACK: 4,
  TOPIC_UNSUBSCRIPTION_REQUEST_ACK: 5
};

/**
 * @return {proto.push.v1.ChannelResponse.ResponseCase}
 */
proto.push.v1.ChannelResponse.prototype.getResponseCase = function() {
  return /** @type {proto.push.v1.ChannelResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.push.v1.ChannelResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.ChannelResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.ChannelResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.ChannelResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.ChannelResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
connectAck: (f = msg.getConnectAck()) && proto.push.v1.ConnectAck.toObject(includeInstance, f),
channelEvent: (f = msg.getChannelEvent()) && proto.push.v1.ChannelEvent.toObject(includeInstance, f),
channelEventAck: (f = msg.getChannelEventAck()) && proto.push.v1.ChannelEventAck.toObject(includeInstance, f),
topicSubscriptionRequestAck: (f = msg.getTopicSubscriptionRequestAck()) && proto.push.v1.TopicSubscriptionRequestAck.toObject(includeInstance, f),
topicUnsubscriptionRequestAck: (f = msg.getTopicUnsubscriptionRequestAck()) && proto.push.v1.TopicUnsubscriptionRequestAck.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.ChannelResponse}
 */
proto.push.v1.ChannelResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.ChannelResponse;
  return proto.push.v1.ChannelResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.ChannelResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.ChannelResponse}
 */
proto.push.v1.ChannelResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.push.v1.ConnectAck;
      reader.readMessage(value,proto.push.v1.ConnectAck.deserializeBinaryFromReader);
      msg.setConnectAck(value);
      break;
    case 2:
      var value = new proto.push.v1.ChannelEvent;
      reader.readMessage(value,proto.push.v1.ChannelEvent.deserializeBinaryFromReader);
      msg.setChannelEvent(value);
      break;
    case 3:
      var value = new proto.push.v1.ChannelEventAck;
      reader.readMessage(value,proto.push.v1.ChannelEventAck.deserializeBinaryFromReader);
      msg.setChannelEventAck(value);
      break;
    case 4:
      var value = new proto.push.v1.TopicSubscriptionRequestAck;
      reader.readMessage(value,proto.push.v1.TopicSubscriptionRequestAck.deserializeBinaryFromReader);
      msg.setTopicSubscriptionRequestAck(value);
      break;
    case 5:
      var value = new proto.push.v1.TopicUnsubscriptionRequestAck;
      reader.readMessage(value,proto.push.v1.TopicUnsubscriptionRequestAck.deserializeBinaryFromReader);
      msg.setTopicUnsubscriptionRequestAck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.ChannelResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.ChannelResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.ChannelResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.ChannelResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectAck();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.push.v1.ConnectAck.serializeBinaryToWriter
    );
  }
  f = message.getChannelEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.push.v1.ChannelEvent.serializeBinaryToWriter
    );
  }
  f = message.getChannelEventAck();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.push.v1.ChannelEventAck.serializeBinaryToWriter
    );
  }
  f = message.getTopicSubscriptionRequestAck();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.push.v1.TopicSubscriptionRequestAck.serializeBinaryToWriter
    );
  }
  f = message.getTopicUnsubscriptionRequestAck();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.push.v1.TopicUnsubscriptionRequestAck.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConnectAck connect_ack = 1;
 * @return {?proto.push.v1.ConnectAck}
 */
proto.push.v1.ChannelResponse.prototype.getConnectAck = function() {
  return /** @type{?proto.push.v1.ConnectAck} */ (
    jspb.Message.getWrapperField(this, proto.push.v1.ConnectAck, 1));
};


/**
 * @param {?proto.push.v1.ConnectAck|undefined} value
 * @return {!proto.push.v1.ChannelResponse} returns this
*/
proto.push.v1.ChannelResponse.prototype.setConnectAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.push.v1.ChannelResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.ChannelResponse} returns this
 */
proto.push.v1.ChannelResponse.prototype.clearConnectAck = function() {
  return this.setConnectAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.ChannelResponse.prototype.hasConnectAck = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChannelEvent channel_event = 2;
 * @return {?proto.push.v1.ChannelEvent}
 */
proto.push.v1.ChannelResponse.prototype.getChannelEvent = function() {
  return /** @type{?proto.push.v1.ChannelEvent} */ (
    jspb.Message.getWrapperField(this, proto.push.v1.ChannelEvent, 2));
};


/**
 * @param {?proto.push.v1.ChannelEvent|undefined} value
 * @return {!proto.push.v1.ChannelResponse} returns this
*/
proto.push.v1.ChannelResponse.prototype.setChannelEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.push.v1.ChannelResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.ChannelResponse} returns this
 */
proto.push.v1.ChannelResponse.prototype.clearChannelEvent = function() {
  return this.setChannelEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.ChannelResponse.prototype.hasChannelEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ChannelEventAck channel_event_ack = 3;
 * @return {?proto.push.v1.ChannelEventAck}
 */
proto.push.v1.ChannelResponse.prototype.getChannelEventAck = function() {
  return /** @type{?proto.push.v1.ChannelEventAck} */ (
    jspb.Message.getWrapperField(this, proto.push.v1.ChannelEventAck, 3));
};


/**
 * @param {?proto.push.v1.ChannelEventAck|undefined} value
 * @return {!proto.push.v1.ChannelResponse} returns this
*/
proto.push.v1.ChannelResponse.prototype.setChannelEventAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.push.v1.ChannelResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.ChannelResponse} returns this
 */
proto.push.v1.ChannelResponse.prototype.clearChannelEventAck = function() {
  return this.setChannelEventAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.ChannelResponse.prototype.hasChannelEventAck = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TopicSubscriptionRequestAck topic_subscription_request_ack = 4;
 * @return {?proto.push.v1.TopicSubscriptionRequestAck}
 */
proto.push.v1.ChannelResponse.prototype.getTopicSubscriptionRequestAck = function() {
  return /** @type{?proto.push.v1.TopicSubscriptionRequestAck} */ (
    jspb.Message.getWrapperField(this, proto.push.v1.TopicSubscriptionRequestAck, 4));
};


/**
 * @param {?proto.push.v1.TopicSubscriptionRequestAck|undefined} value
 * @return {!proto.push.v1.ChannelResponse} returns this
*/
proto.push.v1.ChannelResponse.prototype.setTopicSubscriptionRequestAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.push.v1.ChannelResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.ChannelResponse} returns this
 */
proto.push.v1.ChannelResponse.prototype.clearTopicSubscriptionRequestAck = function() {
  return this.setTopicSubscriptionRequestAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.ChannelResponse.prototype.hasTopicSubscriptionRequestAck = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional TopicUnsubscriptionRequestAck topic_unsubscription_request_ack = 5;
 * @return {?proto.push.v1.TopicUnsubscriptionRequestAck}
 */
proto.push.v1.ChannelResponse.prototype.getTopicUnsubscriptionRequestAck = function() {
  return /** @type{?proto.push.v1.TopicUnsubscriptionRequestAck} */ (
    jspb.Message.getWrapperField(this, proto.push.v1.TopicUnsubscriptionRequestAck, 5));
};


/**
 * @param {?proto.push.v1.TopicUnsubscriptionRequestAck|undefined} value
 * @return {!proto.push.v1.ChannelResponse} returns this
*/
proto.push.v1.ChannelResponse.prototype.setTopicUnsubscriptionRequestAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.push.v1.ChannelResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.ChannelResponse} returns this
 */
proto.push.v1.ChannelResponse.prototype.clearTopicUnsubscriptionRequestAck = function() {
  return this.setTopicUnsubscriptionRequestAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.ChannelResponse.prototype.hasTopicUnsubscriptionRequestAck = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.ChannelEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.ChannelEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.ChannelEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.ChannelEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
uniqueId: jspb.Message.getFieldWithDefault(msg, 1, ""),
topic: jspb.Message.getFieldWithDefault(msg, 2, ""),
event: (f = msg.getEvent()) && proto.push.v1.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.ChannelEvent}
 */
proto.push.v1.ChannelEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.ChannelEvent;
  return proto.push.v1.ChannelEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.ChannelEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.ChannelEvent}
 */
proto.push.v1.ChannelEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUniqueId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 3:
      var value = new proto.push.v1.Event;
      reader.readMessage(value,proto.push.v1.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.ChannelEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.ChannelEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.ChannelEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.ChannelEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUniqueId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.push.v1.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional string unique_id = 1;
 * @return {string}
 */
proto.push.v1.ChannelEvent.prototype.getUniqueId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.ChannelEvent} returns this
 */
proto.push.v1.ChannelEvent.prototype.setUniqueId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string topic = 2;
 * @return {string}
 */
proto.push.v1.ChannelEvent.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.ChannelEvent} returns this
 */
proto.push.v1.ChannelEvent.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Event event = 3;
 * @return {?proto.push.v1.Event}
 */
proto.push.v1.ChannelEvent.prototype.getEvent = function() {
  return /** @type{?proto.push.v1.Event} */ (
    jspb.Message.getWrapperField(this, proto.push.v1.Event, 3));
};


/**
 * @param {?proto.push.v1.Event|undefined} value
 * @return {!proto.push.v1.ChannelEvent} returns this
*/
proto.push.v1.ChannelEvent.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.ChannelEvent} returns this
 */
proto.push.v1.ChannelEvent.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.ChannelEvent.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.ConnectAck.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.ConnectAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.ConnectAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.ConnectAck.toObject = function(includeInstance, msg) {
  var f, obj = {
status: (f = msg.getStatus()) && proto.push.v1.ResponseStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.ConnectAck}
 */
proto.push.v1.ConnectAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.ConnectAck;
  return proto.push.v1.ConnectAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.ConnectAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.ConnectAck}
 */
proto.push.v1.ConnectAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.push.v1.ResponseStatus;
      reader.readMessage(value,proto.push.v1.ResponseStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.ConnectAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.ConnectAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.ConnectAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.ConnectAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.push.v1.ResponseStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseStatus status = 1;
 * @return {?proto.push.v1.ResponseStatus}
 */
proto.push.v1.ConnectAck.prototype.getStatus = function() {
  return /** @type{?proto.push.v1.ResponseStatus} */ (
    jspb.Message.getWrapperField(this, proto.push.v1.ResponseStatus, 1));
};


/**
 * @param {?proto.push.v1.ResponseStatus|undefined} value
 * @return {!proto.push.v1.ConnectAck} returns this
*/
proto.push.v1.ConnectAck.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.ConnectAck} returns this
 */
proto.push.v1.ConnectAck.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.ConnectAck.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.ChannelEventAck.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.ChannelEventAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.ChannelEventAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.ChannelEventAck.toObject = function(includeInstance, msg) {
  var f, obj = {
uniqueId: jspb.Message.getFieldWithDefault(msg, 1, ""),
status: (f = msg.getStatus()) && proto.push.v1.ResponseStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.ChannelEventAck}
 */
proto.push.v1.ChannelEventAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.ChannelEventAck;
  return proto.push.v1.ChannelEventAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.ChannelEventAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.ChannelEventAck}
 */
proto.push.v1.ChannelEventAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUniqueId(value);
      break;
    case 2:
      var value = new proto.push.v1.ResponseStatus;
      reader.readMessage(value,proto.push.v1.ResponseStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.ChannelEventAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.ChannelEventAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.ChannelEventAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.ChannelEventAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUniqueId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.push.v1.ResponseStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional string unique_id = 1;
 * @return {string}
 */
proto.push.v1.ChannelEventAck.prototype.getUniqueId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.ChannelEventAck} returns this
 */
proto.push.v1.ChannelEventAck.prototype.setUniqueId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ResponseStatus status = 2;
 * @return {?proto.push.v1.ResponseStatus}
 */
proto.push.v1.ChannelEventAck.prototype.getStatus = function() {
  return /** @type{?proto.push.v1.ResponseStatus} */ (
    jspb.Message.getWrapperField(this, proto.push.v1.ResponseStatus, 2));
};


/**
 * @param {?proto.push.v1.ResponseStatus|undefined} value
 * @return {!proto.push.v1.ChannelEventAck} returns this
*/
proto.push.v1.ChannelEventAck.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.ChannelEventAck} returns this
 */
proto.push.v1.ChannelEventAck.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.ChannelEventAck.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.TopicSubscriptionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.TopicSubscriptionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.TopicSubscriptionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.TopicSubscriptionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
topic: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.TopicSubscriptionRequest}
 */
proto.push.v1.TopicSubscriptionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.TopicSubscriptionRequest;
  return proto.push.v1.TopicSubscriptionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.TopicSubscriptionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.TopicSubscriptionRequest}
 */
proto.push.v1.TopicSubscriptionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.TopicSubscriptionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.TopicSubscriptionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.TopicSubscriptionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.TopicSubscriptionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string topic = 1;
 * @return {string}
 */
proto.push.v1.TopicSubscriptionRequest.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.TopicSubscriptionRequest} returns this
 */
proto.push.v1.TopicSubscriptionRequest.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.TopicSubscriptionRequestAck.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.TopicSubscriptionRequestAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.TopicSubscriptionRequestAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.TopicSubscriptionRequestAck.toObject = function(includeInstance, msg) {
  var f, obj = {
topic: jspb.Message.getFieldWithDefault(msg, 1, ""),
status: (f = msg.getStatus()) && proto.push.v1.ResponseStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.TopicSubscriptionRequestAck}
 */
proto.push.v1.TopicSubscriptionRequestAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.TopicSubscriptionRequestAck;
  return proto.push.v1.TopicSubscriptionRequestAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.TopicSubscriptionRequestAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.TopicSubscriptionRequestAck}
 */
proto.push.v1.TopicSubscriptionRequestAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 2:
      var value = new proto.push.v1.ResponseStatus;
      reader.readMessage(value,proto.push.v1.ResponseStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.TopicSubscriptionRequestAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.TopicSubscriptionRequestAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.TopicSubscriptionRequestAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.TopicSubscriptionRequestAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.push.v1.ResponseStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional string topic = 1;
 * @return {string}
 */
proto.push.v1.TopicSubscriptionRequestAck.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.TopicSubscriptionRequestAck} returns this
 */
proto.push.v1.TopicSubscriptionRequestAck.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ResponseStatus status = 2;
 * @return {?proto.push.v1.ResponseStatus}
 */
proto.push.v1.TopicSubscriptionRequestAck.prototype.getStatus = function() {
  return /** @type{?proto.push.v1.ResponseStatus} */ (
    jspb.Message.getWrapperField(this, proto.push.v1.ResponseStatus, 2));
};


/**
 * @param {?proto.push.v1.ResponseStatus|undefined} value
 * @return {!proto.push.v1.TopicSubscriptionRequestAck} returns this
*/
proto.push.v1.TopicSubscriptionRequestAck.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.TopicSubscriptionRequestAck} returns this
 */
proto.push.v1.TopicSubscriptionRequestAck.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.TopicSubscriptionRequestAck.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.TopicUnsubscriptionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.TopicUnsubscriptionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.TopicUnsubscriptionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.TopicUnsubscriptionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
topic: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.TopicUnsubscriptionRequest}
 */
proto.push.v1.TopicUnsubscriptionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.TopicUnsubscriptionRequest;
  return proto.push.v1.TopicUnsubscriptionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.TopicUnsubscriptionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.TopicUnsubscriptionRequest}
 */
proto.push.v1.TopicUnsubscriptionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.TopicUnsubscriptionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.TopicUnsubscriptionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.TopicUnsubscriptionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.TopicUnsubscriptionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string topic = 1;
 * @return {string}
 */
proto.push.v1.TopicUnsubscriptionRequest.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.TopicUnsubscriptionRequest} returns this
 */
proto.push.v1.TopicUnsubscriptionRequest.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.TopicUnsubscriptionRequestAck.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.TopicUnsubscriptionRequestAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.TopicUnsubscriptionRequestAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.TopicUnsubscriptionRequestAck.toObject = function(includeInstance, msg) {
  var f, obj = {
topic: jspb.Message.getFieldWithDefault(msg, 1, ""),
status: (f = msg.getStatus()) && proto.push.v1.ResponseStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.TopicUnsubscriptionRequestAck}
 */
proto.push.v1.TopicUnsubscriptionRequestAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.TopicUnsubscriptionRequestAck;
  return proto.push.v1.TopicUnsubscriptionRequestAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.TopicUnsubscriptionRequestAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.TopicUnsubscriptionRequestAck}
 */
proto.push.v1.TopicUnsubscriptionRequestAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 2:
      var value = new proto.push.v1.ResponseStatus;
      reader.readMessage(value,proto.push.v1.ResponseStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.TopicUnsubscriptionRequestAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.TopicUnsubscriptionRequestAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.TopicUnsubscriptionRequestAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.TopicUnsubscriptionRequestAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.push.v1.ResponseStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional string topic = 1;
 * @return {string}
 */
proto.push.v1.TopicUnsubscriptionRequestAck.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.TopicUnsubscriptionRequestAck} returns this
 */
proto.push.v1.TopicUnsubscriptionRequestAck.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ResponseStatus status = 2;
 * @return {?proto.push.v1.ResponseStatus}
 */
proto.push.v1.TopicUnsubscriptionRequestAck.prototype.getStatus = function() {
  return /** @type{?proto.push.v1.ResponseStatus} */ (
    jspb.Message.getWrapperField(this, proto.push.v1.ResponseStatus, 2));
};


/**
 * @param {?proto.push.v1.ResponseStatus|undefined} value
 * @return {!proto.push.v1.TopicUnsubscriptionRequestAck} returns this
*/
proto.push.v1.TopicUnsubscriptionRequestAck.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.TopicUnsubscriptionRequestAck} returns this
 */
proto.push.v1.TopicUnsubscriptionRequestAck.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.TopicUnsubscriptionRequestAck.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.GetClientActiveDevicesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.GetClientActiveDevicesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.GetClientActiveDevicesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.GetClientActiveDevicesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
clientId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.GetClientActiveDevicesRequest}
 */
proto.push.v1.GetClientActiveDevicesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.GetClientActiveDevicesRequest;
  return proto.push.v1.GetClientActiveDevicesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.GetClientActiveDevicesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.GetClientActiveDevicesRequest}
 */
proto.push.v1.GetClientActiveDevicesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.GetClientActiveDevicesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.GetClientActiveDevicesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.GetClientActiveDevicesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.GetClientActiveDevicesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.push.v1.GetClientActiveDevicesRequest.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.GetClientActiveDevicesRequest} returns this
 */
proto.push.v1.GetClientActiveDevicesRequest.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.push.v1.GetClientActiveDevicesResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.GetClientActiveDevicesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.GetClientActiveDevicesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.GetClientActiveDevicesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.GetClientActiveDevicesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
status: (f = msg.getStatus()) && proto.push.v1.ResponseStatus.toObject(includeInstance, f),
isClientOnline: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
devicesList: jspb.Message.toObjectList(msg.getDevicesList(),
    proto.push.v1.Device.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.GetClientActiveDevicesResponse}
 */
proto.push.v1.GetClientActiveDevicesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.GetClientActiveDevicesResponse;
  return proto.push.v1.GetClientActiveDevicesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.GetClientActiveDevicesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.GetClientActiveDevicesResponse}
 */
proto.push.v1.GetClientActiveDevicesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.push.v1.ResponseStatus;
      reader.readMessage(value,proto.push.v1.ResponseStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsClientOnline(value);
      break;
    case 3:
      var value = new proto.push.v1.Device;
      reader.readMessage(value,proto.push.v1.Device.deserializeBinaryFromReader);
      msg.addDevices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.GetClientActiveDevicesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.GetClientActiveDevicesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.GetClientActiveDevicesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.GetClientActiveDevicesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.push.v1.ResponseStatus.serializeBinaryToWriter
    );
  }
  f = message.getIsClientOnline();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDevicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.push.v1.Device.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseStatus status = 1;
 * @return {?proto.push.v1.ResponseStatus}
 */
proto.push.v1.GetClientActiveDevicesResponse.prototype.getStatus = function() {
  return /** @type{?proto.push.v1.ResponseStatus} */ (
    jspb.Message.getWrapperField(this, proto.push.v1.ResponseStatus, 1));
};


/**
 * @param {?proto.push.v1.ResponseStatus|undefined} value
 * @return {!proto.push.v1.GetClientActiveDevicesResponse} returns this
*/
proto.push.v1.GetClientActiveDevicesResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.GetClientActiveDevicesResponse} returns this
 */
proto.push.v1.GetClientActiveDevicesResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.GetClientActiveDevicesResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool is_client_online = 2;
 * @return {boolean}
 */
proto.push.v1.GetClientActiveDevicesResponse.prototype.getIsClientOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.push.v1.GetClientActiveDevicesResponse} returns this
 */
proto.push.v1.GetClientActiveDevicesResponse.prototype.setIsClientOnline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * repeated Device devices = 3;
 * @return {!Array<!proto.push.v1.Device>}
 */
proto.push.v1.GetClientActiveDevicesResponse.prototype.getDevicesList = function() {
  return /** @type{!Array<!proto.push.v1.Device>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.push.v1.Device, 3));
};


/**
 * @param {!Array<!proto.push.v1.Device>} value
 * @return {!proto.push.v1.GetClientActiveDevicesResponse} returns this
*/
proto.push.v1.GetClientActiveDevicesResponse.prototype.setDevicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.push.v1.Device=} opt_value
 * @param {number=} opt_index
 * @return {!proto.push.v1.Device}
 */
proto.push.v1.GetClientActiveDevicesResponse.prototype.addDevices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.push.v1.Device, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.push.v1.GetClientActiveDevicesResponse} returns this
 */
proto.push.v1.GetClientActiveDevicesResponse.prototype.clearDevicesList = function() {
  return this.setDevicesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.SendEventToClientChannelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.SendEventToClientChannelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.SendEventToClientChannelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.SendEventToClientChannelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
event: (f = msg.getEvent()) && proto.push.v1.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.SendEventToClientChannelRequest}
 */
proto.push.v1.SendEventToClientChannelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.SendEventToClientChannelRequest;
  return proto.push.v1.SendEventToClientChannelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.SendEventToClientChannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.SendEventToClientChannelRequest}
 */
proto.push.v1.SendEventToClientChannelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = new proto.push.v1.Event;
      reader.readMessage(value,proto.push.v1.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.SendEventToClientChannelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.SendEventToClientChannelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.SendEventToClientChannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.SendEventToClientChannelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.push.v1.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.push.v1.SendEventToClientChannelRequest.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.SendEventToClientChannelRequest} returns this
 */
proto.push.v1.SendEventToClientChannelRequest.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Event event = 2;
 * @return {?proto.push.v1.Event}
 */
proto.push.v1.SendEventToClientChannelRequest.prototype.getEvent = function() {
  return /** @type{?proto.push.v1.Event} */ (
    jspb.Message.getWrapperField(this, proto.push.v1.Event, 2));
};


/**
 * @param {?proto.push.v1.Event|undefined} value
 * @return {!proto.push.v1.SendEventToClientChannelRequest} returns this
*/
proto.push.v1.SendEventToClientChannelRequest.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.SendEventToClientChannelRequest} returns this
 */
proto.push.v1.SendEventToClientChannelRequest.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.SendEventToClientChannelRequest.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.SendEventToClientChannelResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.SendEventToClientChannelResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.SendEventToClientChannelResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.SendEventToClientChannelResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
status: (f = msg.getStatus()) && proto.push.v1.ResponseStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.SendEventToClientChannelResponse}
 */
proto.push.v1.SendEventToClientChannelResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.SendEventToClientChannelResponse;
  return proto.push.v1.SendEventToClientChannelResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.SendEventToClientChannelResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.SendEventToClientChannelResponse}
 */
proto.push.v1.SendEventToClientChannelResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.push.v1.ResponseStatus;
      reader.readMessage(value,proto.push.v1.ResponseStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.SendEventToClientChannelResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.SendEventToClientChannelResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.SendEventToClientChannelResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.SendEventToClientChannelResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.push.v1.ResponseStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseStatus status = 1;
 * @return {?proto.push.v1.ResponseStatus}
 */
proto.push.v1.SendEventToClientChannelResponse.prototype.getStatus = function() {
  return /** @type{?proto.push.v1.ResponseStatus} */ (
    jspb.Message.getWrapperField(this, proto.push.v1.ResponseStatus, 1));
};


/**
 * @param {?proto.push.v1.ResponseStatus|undefined} value
 * @return {!proto.push.v1.SendEventToClientChannelResponse} returns this
*/
proto.push.v1.SendEventToClientChannelResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.SendEventToClientChannelResponse} returns this
 */
proto.push.v1.SendEventToClientChannelResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.SendEventToClientChannelResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.SendEventToClientDeviceChannelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.SendEventToClientDeviceChannelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.SendEventToClientDeviceChannelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.SendEventToClientDeviceChannelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
deviceId: jspb.Message.getFieldWithDefault(msg, 2, ""),
event: (f = msg.getEvent()) && proto.push.v1.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.SendEventToClientDeviceChannelRequest}
 */
proto.push.v1.SendEventToClientDeviceChannelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.SendEventToClientDeviceChannelRequest;
  return proto.push.v1.SendEventToClientDeviceChannelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.SendEventToClientDeviceChannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.SendEventToClientDeviceChannelRequest}
 */
proto.push.v1.SendEventToClientDeviceChannelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 3:
      var value = new proto.push.v1.Event;
      reader.readMessage(value,proto.push.v1.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.SendEventToClientDeviceChannelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.SendEventToClientDeviceChannelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.SendEventToClientDeviceChannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.SendEventToClientDeviceChannelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.push.v1.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.push.v1.SendEventToClientDeviceChannelRequest.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.SendEventToClientDeviceChannelRequest} returns this
 */
proto.push.v1.SendEventToClientDeviceChannelRequest.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string device_id = 2;
 * @return {string}
 */
proto.push.v1.SendEventToClientDeviceChannelRequest.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.SendEventToClientDeviceChannelRequest} returns this
 */
proto.push.v1.SendEventToClientDeviceChannelRequest.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Event event = 3;
 * @return {?proto.push.v1.Event}
 */
proto.push.v1.SendEventToClientDeviceChannelRequest.prototype.getEvent = function() {
  return /** @type{?proto.push.v1.Event} */ (
    jspb.Message.getWrapperField(this, proto.push.v1.Event, 3));
};


/**
 * @param {?proto.push.v1.Event|undefined} value
 * @return {!proto.push.v1.SendEventToClientDeviceChannelRequest} returns this
*/
proto.push.v1.SendEventToClientDeviceChannelRequest.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.SendEventToClientDeviceChannelRequest} returns this
 */
proto.push.v1.SendEventToClientDeviceChannelRequest.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.SendEventToClientDeviceChannelRequest.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.SendEventToClientDeviceChannelResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.SendEventToClientDeviceChannelResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.SendEventToClientDeviceChannelResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.SendEventToClientDeviceChannelResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
status: (f = msg.getStatus()) && proto.push.v1.ResponseStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.SendEventToClientDeviceChannelResponse}
 */
proto.push.v1.SendEventToClientDeviceChannelResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.SendEventToClientDeviceChannelResponse;
  return proto.push.v1.SendEventToClientDeviceChannelResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.SendEventToClientDeviceChannelResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.SendEventToClientDeviceChannelResponse}
 */
proto.push.v1.SendEventToClientDeviceChannelResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.push.v1.ResponseStatus;
      reader.readMessage(value,proto.push.v1.ResponseStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.SendEventToClientDeviceChannelResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.SendEventToClientDeviceChannelResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.SendEventToClientDeviceChannelResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.SendEventToClientDeviceChannelResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.push.v1.ResponseStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseStatus status = 1;
 * @return {?proto.push.v1.ResponseStatus}
 */
proto.push.v1.SendEventToClientDeviceChannelResponse.prototype.getStatus = function() {
  return /** @type{?proto.push.v1.ResponseStatus} */ (
    jspb.Message.getWrapperField(this, proto.push.v1.ResponseStatus, 1));
};


/**
 * @param {?proto.push.v1.ResponseStatus|undefined} value
 * @return {!proto.push.v1.SendEventToClientDeviceChannelResponse} returns this
*/
proto.push.v1.SendEventToClientDeviceChannelResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.SendEventToClientDeviceChannelResponse} returns this
 */
proto.push.v1.SendEventToClientDeviceChannelResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.SendEventToClientDeviceChannelResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.SendEventToTopicRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.SendEventToTopicRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.SendEventToTopicRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.SendEventToTopicRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
topic: jspb.Message.getFieldWithDefault(msg, 1, ""),
event: (f = msg.getEvent()) && proto.push.v1.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.SendEventToTopicRequest}
 */
proto.push.v1.SendEventToTopicRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.SendEventToTopicRequest;
  return proto.push.v1.SendEventToTopicRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.SendEventToTopicRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.SendEventToTopicRequest}
 */
proto.push.v1.SendEventToTopicRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 2:
      var value = new proto.push.v1.Event;
      reader.readMessage(value,proto.push.v1.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.SendEventToTopicRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.SendEventToTopicRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.SendEventToTopicRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.SendEventToTopicRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.push.v1.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional string topic = 1;
 * @return {string}
 */
proto.push.v1.SendEventToTopicRequest.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.SendEventToTopicRequest} returns this
 */
proto.push.v1.SendEventToTopicRequest.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Event event = 2;
 * @return {?proto.push.v1.Event}
 */
proto.push.v1.SendEventToTopicRequest.prototype.getEvent = function() {
  return /** @type{?proto.push.v1.Event} */ (
    jspb.Message.getWrapperField(this, proto.push.v1.Event, 2));
};


/**
 * @param {?proto.push.v1.Event|undefined} value
 * @return {!proto.push.v1.SendEventToTopicRequest} returns this
*/
proto.push.v1.SendEventToTopicRequest.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.SendEventToTopicRequest} returns this
 */
proto.push.v1.SendEventToTopicRequest.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.SendEventToTopicRequest.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.SendEventToTopicResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.SendEventToTopicResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.SendEventToTopicResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.SendEventToTopicResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
status: (f = msg.getStatus()) && proto.push.v1.ResponseStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.SendEventToTopicResponse}
 */
proto.push.v1.SendEventToTopicResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.SendEventToTopicResponse;
  return proto.push.v1.SendEventToTopicResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.SendEventToTopicResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.SendEventToTopicResponse}
 */
proto.push.v1.SendEventToTopicResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.push.v1.ResponseStatus;
      reader.readMessage(value,proto.push.v1.ResponseStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.SendEventToTopicResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.SendEventToTopicResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.SendEventToTopicResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.SendEventToTopicResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.push.v1.ResponseStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseStatus status = 1;
 * @return {?proto.push.v1.ResponseStatus}
 */
proto.push.v1.SendEventToTopicResponse.prototype.getStatus = function() {
  return /** @type{?proto.push.v1.ResponseStatus} */ (
    jspb.Message.getWrapperField(this, proto.push.v1.ResponseStatus, 1));
};


/**
 * @param {?proto.push.v1.ResponseStatus|undefined} value
 * @return {!proto.push.v1.SendEventToTopicResponse} returns this
*/
proto.push.v1.SendEventToTopicResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.SendEventToTopicResponse} returns this
 */
proto.push.v1.SendEventToTopicResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.SendEventToTopicResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.push.v1.SendEventToTopicsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.SendEventToTopicsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.SendEventToTopicsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.SendEventToTopicsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.SendEventToTopicsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
requestsList: jspb.Message.toObjectList(msg.getRequestsList(),
    proto.push.v1.SendEventToTopicRequest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.SendEventToTopicsRequest}
 */
proto.push.v1.SendEventToTopicsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.SendEventToTopicsRequest;
  return proto.push.v1.SendEventToTopicsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.SendEventToTopicsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.SendEventToTopicsRequest}
 */
proto.push.v1.SendEventToTopicsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.push.v1.SendEventToTopicRequest;
      reader.readMessage(value,proto.push.v1.SendEventToTopicRequest.deserializeBinaryFromReader);
      msg.addRequests(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.SendEventToTopicsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.SendEventToTopicsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.SendEventToTopicsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.SendEventToTopicsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.push.v1.SendEventToTopicRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SendEventToTopicRequest requests = 1;
 * @return {!Array<!proto.push.v1.SendEventToTopicRequest>}
 */
proto.push.v1.SendEventToTopicsRequest.prototype.getRequestsList = function() {
  return /** @type{!Array<!proto.push.v1.SendEventToTopicRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.push.v1.SendEventToTopicRequest, 1));
};


/**
 * @param {!Array<!proto.push.v1.SendEventToTopicRequest>} value
 * @return {!proto.push.v1.SendEventToTopicsRequest} returns this
*/
proto.push.v1.SendEventToTopicsRequest.prototype.setRequestsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.push.v1.SendEventToTopicRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.push.v1.SendEventToTopicRequest}
 */
proto.push.v1.SendEventToTopicsRequest.prototype.addRequests = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.push.v1.SendEventToTopicRequest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.push.v1.SendEventToTopicsRequest} returns this
 */
proto.push.v1.SendEventToTopicsRequest.prototype.clearRequestsList = function() {
  return this.setRequestsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.SendEventToTopicsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.SendEventToTopicsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.SendEventToTopicsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.SendEventToTopicsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
status: (f = msg.getStatus()) && proto.push.v1.ResponseStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.SendEventToTopicsResponse}
 */
proto.push.v1.SendEventToTopicsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.SendEventToTopicsResponse;
  return proto.push.v1.SendEventToTopicsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.SendEventToTopicsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.SendEventToTopicsResponse}
 */
proto.push.v1.SendEventToTopicsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.push.v1.ResponseStatus;
      reader.readMessage(value,proto.push.v1.ResponseStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.SendEventToTopicsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.SendEventToTopicsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.SendEventToTopicsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.SendEventToTopicsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.push.v1.ResponseStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseStatus status = 1;
 * @return {?proto.push.v1.ResponseStatus}
 */
proto.push.v1.SendEventToTopicsResponse.prototype.getStatus = function() {
  return /** @type{?proto.push.v1.ResponseStatus} */ (
    jspb.Message.getWrapperField(this, proto.push.v1.ResponseStatus, 1));
};


/**
 * @param {?proto.push.v1.ResponseStatus|undefined} value
 * @return {!proto.push.v1.SendEventToTopicsResponse} returns this
*/
proto.push.v1.SendEventToTopicsResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.SendEventToTopicsResponse} returns this
 */
proto.push.v1.SendEventToTopicsResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.SendEventToTopicsResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
formatType: jspb.Message.getFieldWithDefault(msg, 2, 0),
data: (f = msg.getData()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.Event}
 */
proto.push.v1.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.Event;
  return proto.push.v1.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.Event}
 */
proto.push.v1.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.push.v1.Event.Type} */ (reader.readEnum());
      msg.setFormatType(value);
      break;
    case 3:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFormatType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.push.v1.Event.Type = {
  TYPE_JSON_UNSPECIFIED: 0,
  TYPE_PROTO: 1
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.push.v1.Event.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.Event} returns this
 */
proto.push.v1.Event.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Type format_type = 2;
 * @return {!proto.push.v1.Event.Type}
 */
proto.push.v1.Event.prototype.getFormatType = function() {
  return /** @type {!proto.push.v1.Event.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.push.v1.Event.Type} value
 * @return {!proto.push.v1.Event} returns this
 */
proto.push.v1.Event.prototype.setFormatType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional google.protobuf.Any data = 3;
 * @return {?proto.google.protobuf.Any}
 */
proto.push.v1.Event.prototype.getData = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 3));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.push.v1.Event} returns this
*/
proto.push.v1.Event.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.Event} returns this
 */
proto.push.v1.Event.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.Event.prototype.hasData = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.ResponseStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.ResponseStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.ResponseStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.ResponseStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
errorCode: jspb.Message.getFieldWithDefault(msg, 2, ""),
messageMap: (f = msg.getMessageMap()) ? f.toObject(includeInstance, undefined) : [],
errorType: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.ResponseStatus}
 */
proto.push.v1.ResponseStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.ResponseStatus;
  return proto.push.v1.ResponseStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.ResponseStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.ResponseStatus}
 */
proto.push.v1.ResponseStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorCode(value);
      break;
    case 3:
      var value = msg.getMessageMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.ResponseStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.ResponseStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.ResponseStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.ResponseStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrorCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessageMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getErrorType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.push.v1.ResponseStatus.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.push.v1.ResponseStatus} returns this
 */
proto.push.v1.ResponseStatus.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string error_code = 2;
 * @return {string}
 */
proto.push.v1.ResponseStatus.prototype.getErrorCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.ResponseStatus} returns this
 */
proto.push.v1.ResponseStatus.prototype.setErrorCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, string> message = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.push.v1.ResponseStatus.prototype.getMessageMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.push.v1.ResponseStatus} returns this
 */
proto.push.v1.ResponseStatus.prototype.clearMessageMap = function() {
  this.getMessageMap().clear();
  return this;
};


/**
 * optional string error_type = 4;
 * @return {string}
 */
proto.push.v1.ResponseStatus.prototype.getErrorType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.ResponseStatus} returns this
 */
proto.push.v1.ResponseStatus.prototype.setErrorType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.Device.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.Device.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.Device} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.Device.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
loggedInAt: (f = msg.getLoggedInAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
attributesMap: (f = msg.getAttributesMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.Device}
 */
proto.push.v1.Device.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.Device;
  return proto.push.v1.Device.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.Device} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.Device}
 */
proto.push.v1.Device.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLoggedInAt(value);
      break;
    case 3:
      var value = msg.getAttributesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.Device.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.Device.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.Device} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.Device.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLoggedInAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getAttributesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.push.v1.Device.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.Device} returns this
 */
proto.push.v1.Device.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp logged_in_at = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.push.v1.Device.prototype.getLoggedInAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.push.v1.Device} returns this
*/
proto.push.v1.Device.prototype.setLoggedInAt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.Device} returns this
 */
proto.push.v1.Device.prototype.clearLoggedInAt = function() {
  return this.setLoggedInAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.Device.prototype.hasLoggedInAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * map<string, string> attributes = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.push.v1.Device.prototype.getAttributesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.push.v1.Device} returns this
 */
proto.push.v1.Device.prototype.clearAttributesMap = function() {
  this.getAttributesMap().clear();
  return this;
};


goog.object.extend(exports, proto.push.v1);
